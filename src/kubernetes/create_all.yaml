apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        tier: backend
    spec:
      containers:
      - name: master
        image: kmykoh/redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379


---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
    tier: backend
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
    tier: backend

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres


---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
        tier: backend
    spec:
      containers:
      - name: master
        image: kmykoh/postgres
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 5432

        envFrom:
            - configMapRef:
                name: postgres-config


---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
    tier: backend
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
    tier: backend

---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: frontend
spec:
  selector:
    matchLabels:
      app: tinywebsite
      tier: frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: tinywebsite
        tier: frontend
    spec:
      containers:
      - name: tinywebsite
        image: kmykoh/client
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below:
          # value: env
        ports:
        - containerPort: 8001

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: tinywebsite
    tier: frontend
spec:
  # comment or delete the following line if you want to use a LoadBalancer
  type: LoadBalancer
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # type: LoadBalancer
  ports:
  - port: 8001
    nodePort: 30080
    name: http
  selector:
    app: tinywebsite
    tier: frontend


